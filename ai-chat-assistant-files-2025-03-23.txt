===== src/app/layout.tsx =====
import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'

const geistSans = Geist({
	variable: '--font-geist-sans',
	subsets: ['latin']
})

const geistMono = Geist_Mono({
	variable: '--font-geist-mono',
	subsets: ['latin']
})

export const metadata: Metadata = {
	title: 'Create Next App',
	description: 'Generated by create next app'
}

export default function RootLayout({
	children
}: Readonly<{
	children: React.ReactNode
}>) {
	return (
		<html lang="en">
			<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>{children}</body>
		</html>
	)
}
===== src/app/api/chat/route.ts =====
import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! })

export async function POST(req: NextRequest) {
	try {
		const { messages } = await req.json()

		if (!Array.isArray(messages)) {
			console.error('[API_CHAT_ERROR] Invalid messages payload:', messages)
			return new NextResponse('Invalid request format', { status: 400 })
		}

		const completion = await openai.chat.completions.create({
			model: 'gpt-4o-2024-05-13',
			messages,
			temperature: 0.7
		})

		const reply = completion.choices[0]?.message?.content || 'No response.'
		return NextResponse.json({ reply })
	} catch (error) {
		console.error('[API_CHAT_ERROR]', error)
		return new NextResponse('Internal Server Error', { status: 500 })
	}
}
===== src/app/page.tsx =====
'use client'

import { useState } from 'react'
import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { useChatStore } from '@/lib/store/chat-store'
import { Moon, Sun } from 'lucide-react'

export default function ChatPage() {
	const { messages, addMessage } = useChatStore()
	const [input, setInput] = useState('')
	const [loading, setLoading] = useState(false)
	const { theme, setTheme } = useTheme()

	const handleSend = async () => {
		if (!input.trim()) return
		setLoading(true)
		const userMessage: { role: 'user' | 'assistant'; content: string } = { role: 'user', content: input }
		addMessage(userMessage)
		setInput('')

		try {
			const res = await fetch('/api/chat', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ messages: [...messages, userMessage] })
			})

			let data
			try {
				data = await res.json()
			} catch {
				const fallback = await res.text()
				throw new Error(`API Error ${res.status}: ${fallback}`)
			}

			if (data.reply) {
				addMessage({ role: 'assistant', content: data.reply })
			}
		} catch (err) {
			console.error('Error sending message:', err)
			addMessage({ role: 'assistant', content: '⚠️ API error. Check logs or API key.' })
		} finally {
			setLoading(false)
		}
	}

	return (
		<div className="mx-auto max-w-2xl space-y-4 p-4">
			<div className="flex items-center justify-between">
				<h1 className="text-xl font-bold">AI Chat Assistant</h1>
				<Button
					variant="outline"
					onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
					size="icon"
				>
					{theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
				</Button>
			</div>
			<div className="space-y-2">
				{messages.map((msg, idx) => (
					<Card key={idx}>
						<CardContent className="p-4">
							<p className="text-sm text-gray-500">{msg.role === 'user' ? 'You' : 'AI'}</p>
							<p>{msg.content}</p>
						</CardContent>
					</Card>
				))}
			</div>
			<div className="flex gap-2">
				<Input
					placeholder="Ask something..."
					value={input}
					onChange={(e) => setInput(e.target.value)}
					disabled={loading}
				/>
				<Button onClick={handleSend} disabled={loading}>
					Send
				</Button>
			</div>
		</div>
	)
}
===== src/components/ui/card.tsx =====
import * as React from 'react'

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div
			ref={ref}
			className={`bg-card text-card-foreground rounded-lg border shadow-sm ${className}`}
			{...props}
		/>
	)
)
Card.displayName = 'Card'

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
)
CardContent.displayName = 'CardContent'

export { Card, CardContent }
===== src/components/ui/button.tsx =====
import { cn } from '@/lib/utils'
import { Slot } from '@radix-ui/react-slot'
import { type VariantProps, cva } from 'class-variance-authority'
import * as React from 'react'

const buttonVariants = cva(
	'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
	{
		variants: {
			variant: {
				default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
				destructive: 'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
				outline:
					'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
				secondary: 'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
				ghost: 'hover:bg-accent hover:text-accent-foreground',
				link: 'text-primary underline-offset-4 hover:underline'
			},
			size: {
				default: 'h-9 px-4 py-2',
				sm: 'h-8 rounded-md px-3 text-xs',
				lg: 'h-10 rounded-md px-8',
				icon: 'h-9 w-9'
			}
		},
		defaultVariants: {
			variant: 'default',
			size: 'default'
		}
	}
)

export interface ButtonProps
	extends React.ButtonHTMLAttributes<HTMLButtonElement>,
		VariantProps<typeof buttonVariants> {
	asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
	({ className, variant, size, asChild = false, ...props }, ref) => {
		const Comp = asChild ? Slot : 'button'
		return (
			<Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
		)
	}
)
Button.displayName = 'Button'

export { Button, buttonVariants }
===== src/components/ui/input.tsx =====
import * as React from 'react'

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {
	return (
		<input
			ref={ref}
			className={`border-input bg-background ring-offset-background placeholder:text-muted-foreground focus:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
			{...props}
		/>
	)
})
Input.displayName = 'Input'

export { Input }
===== src/lib/utils.ts =====
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}
===== src/lib/store/chat-store.ts =====
import { create } from 'zustand'

interface Message {
	role: 'user' | 'assistant'
	content: string
}

interface ChatStore {
	messages: Message[]
	addMessage: (msg: Message) => void
	setMessages: (msgs: Message[]) => void
}

export const useChatStore = create<ChatStore>((set) => ({
	messages: [],
	addMessage: (msg) => set((state) => ({ messages: [...state.messages, msg] })),
	setMessages: (msgs) => set({ messages: msgs })
}))
