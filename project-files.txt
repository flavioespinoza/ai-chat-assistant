===== src/app/layout.tsx =====
import type { Metadata } from 'next'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'

const geistSans = Geist({
	variable: '--font-geist-sans',
	subsets: ['latin']
})

const geistMono = Geist_Mono({
	variable: '--font-geist-mono',
	subsets: ['latin']
})

export const metadata: Metadata = {
	title: 'Create Next App',
	description: 'Generated by create next app'
}

export default function RootLayout({
	children
}: Readonly<{
	children: React.ReactNode
}>) {
	return (
		<html lang="en">
			<body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>{children}</body>
		</html>
	)
}
===== src/app/api/chat/route.ts =====
import { NextRequest } from 'next/server'
import { OpenAIStream, StreamingTextResponse } from 'ai'
import OpenAI from 'openai'

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! })

export async function POST(req: NextRequest) {
	const { messages } = await req.json()

	const response = await openai.chat.completions.create({
		model: 'gpt-4',
		stream: true,
		messages,
		temperature: 0.7
	})

	const stream = OpenAIStream(response)
	return new StreamingTextResponse(stream)
}
===== src/app/page.tsx =====
'use client'

import { useState } from 'react'
import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { useChatStore } from '@/lib/store/chat-store'
import { Moon, Sun } from 'lucide-react'

export default function ChatPage() {
	const { messages, addMessage, setMessages } = useChatStore()
	const [input, setInput] = useState('')
	const [loading, setLoading] = useState(false)
	const { theme, setTheme } = useTheme()

	const handleSend = async () => {
		if (!input.trim()) return
		setLoading(true)
		const userMessage = { role: 'user', content: input }
		addMessage(userMessage)
		setInput('')

		try {
			const res = await fetch('/api/chat', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ messages: [...messages, userMessage] })
			})
			const data = await res.json()
			if (data.reply) {
				addMessage({ role: 'assistant', content: data.reply })
			}
		} catch (err) {
			console.error('Error sending message', err)
		} finally {
			setLoading(false)
		}
	}

	return (
		<div className="mx-auto max-w-2xl space-y-4 p-4">
			<div className="flex items-center justify-between">
				<h1 className="text-xl font-bold">AI Chat Assistant</h1>
				<Button
					variant="outline"
					onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
					size="icon"
				>
					{theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
				</Button>
			</div>
			<div className="space-y-2">
				{messages.map((msg, idx) => (
					<Card key={idx}>
						<CardContent className="p-4">
							<p className="text-sm text-gray-500">{msg.role === 'user' ? 'You' : 'AI'}</p>
							<p>{msg.content}</p>
						</CardContent>
					</Card>
				))}
			</div>
			<div className="flex gap-2">
				<Input
					placeholder="Ask something..."
					value={input}
					onChange={(e) => setInput(e.target.value)}
					disabled={loading}
				/>
				<Button onClick={handleSend} disabled={loading}>
					Send
				</Button>
			</div>
		</div>
	)
}
===== src/components/ui/card.tsx =====
import * as React from 'react'

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => (
		<div
			ref={ref}
			className={`bg-card text-card-foreground rounded-lg border shadow-sm ${className}`}
			{...props}
		/>
	)
)
Card.displayName = 'Card'

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
	({ className, ...props }, ref) => <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
)
CardContent.displayName = 'CardContent'

export { Card, CardContent }
===== src/components/ui/button.tsx =====
import * as React from 'react'
import { cn } from '@/lib/utils'
import { Slot } from '@radix-ui/react-slot'

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
	asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
	({ className, asChild = false, ...props }, ref) => {
		const Comp = asChild ? Slot : 'button'
		return (
			<Comp
				className={cn(
					'focus:ring-ring inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:opacity-50',
					className
				)}
				ref={ref}
				{...props}
			/>
		)
	}
)
Button.displayName = 'Button'

export { Button }
===== src/components/ui/input.tsx =====
import * as React from 'react'

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, ...props }, ref) => {
	return (
		<input
			ref={ref}
			className={`border-input bg-background ring-offset-background placeholder:text-muted-foreground focus:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
			{...props}
		/>
	)
})
Input.displayName = 'Input'

export { Input }
===== src/lib/utils.ts =====
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}
===== src/lib/store/chat-store.ts =====
import { create } from 'zustand'

interface Message {
	role: 'user' | 'assistant'
	content: string
}

interface ChatStore {
	messages: Message[]
	addMessage: (msg: Message) => void
	setMessages: (msgs: Message[]) => void
}

export const useChatStore = create<ChatStore>((set) => ({
	messages: [],
	addMessage: (msg) => set((state) => ({ messages: [...state.messages, msg] })),
	setMessages: (msgs) => set({ messages: msgs })
}))
